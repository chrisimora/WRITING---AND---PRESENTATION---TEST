# Day 1

# Unix Command Line dan Git

Biasanya kita mengakses *file* sistem dengan membuka aplikasi berbasis GUI yang dinamakan **File Explorer** jika kamu menggunakan sistem operasi Windows. Ternyata ada cara lain untuk mengakses *file* sistem tersebut yaitu dengan command-line interface (CLI), dengan CLI kita bisa mengakses file sistem hanya dengan mengetikkan perintah atau teks

## Apa itu CLI dan Shell

- Shell adalah program yang digunakan untuk berkomunikasi atau memerintah sistem
- CLI adalah jenis shell yang berbasis teks

## Penggunaan Git Bash

- Unduh Git Bash melalui tautan [berikut ini](https://git-scm.com/downloads)
- Kemudian instal di PC kamu

## Perintah untuk Git Bash

### Perintah Navigasi

- pwd, digunakan untuk melihat *current working directory*
- ls, digunakan untuk melihat daftar *file* yang ada di sebuah direktori
- cd <direktori>, digunakan untuk berpindah direktori

### Perintah Membuat *File* & Direktori

- touch, digunakan untuk membuat sebuah *file*
- mkdir, digunakan untuk membuat sebuah direktori

### Perintah Melihat Isi *File*

- head, digunakan untuk melihat beberapa *line* awal dari sebuah *file* teks
- tail, digunakan untuk melihat beberapa *line* akhir dari sebuah *file* teks
- cat, digunakan untuk melihat isi sebuah *file*

### Perintah Menyalin, Memindahkan, dan Menghapus File & Direktori

- cp, digunakan untuk menyalin *file* atau direktori
- mv, digunakan untuk memindahkan *file* atau direktori, bisa digunakan untuk *rename*
- rm, digunakan untuk menghapus file atau direktori

## Apa itu Git

- Git adalah perangkat lunak *open-source* yang digunakan sebagai *version control* (kontrol versi)
- Git dapat  melacak perubahan dalam sekumpulan *file* oleh karena itu Git banyak digunakan oleh *programmer* untuk berkolaborasi dalam mengembangkan perangkat lunak
- Git ditemukan pada 2005 oleh [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds)
- Dalam Git, kita akan mengenal repositori atau sering disingkat repo. Repo adalah sebuah folder yang bersisi *source code* (kode sumber)
- Terdapat 4 fundamental dalam Git Workflow
    - *Working Directory*
    - *Staging Area*
    - *Local Repository*
    - *Remote Repository*
- Jika melihat sebuah *file* dalam w*orking directory*, *file* tersebut bisa berada dalam tiga kemungkinan
    - File tersebut bisa di-*staged*, yang berarti *file* yang memiliki perubahan, ditandai untuk di-*commit* ke *local repository* (repositori lokal) tetapi belum di-*commit*.
    - File tersebut bisa dimodifikasi, yang berarti *file* memiliki perubahan belum disimpan di repositori lokal.
    - Filter di-*commit, y*ang berarti bahwa perubahan yang dibuat pada *file* tersebut disimpan dengan aman di *local repository* (repositori lokal).

## Perintah Pada Git

- git config, digunakan untuk mengatur nama penulis dan alamat email untuk digunakan dengan komit.
- git init, digunakan untuk memulai repositori baru.
- git add, digunakan untuk menambahkan file yang ada di *working directory* ke *staging area*
- git commit, digunakan untuk menambahkan semua file yang di-*staged* ke *local repository* (repositori lokal).
- git push, digunakan untuk menambahkan semua file yang di-*commit* di repositori lokal ke *remote repository*. Sehingga di *remote repository*, semua *file* dan perubahannya akan terlihat oleh siapa saja yang memiliki akses ke *remote repository* tersebut.
- git fetch, digunakan untuk mendapatkan *file* dari *remote repository* ke repositori lokal, tetapi tidak ke dalam *working directory*.
- git merge, digunakan menggabungkan *branch* lain ke dalam *branch* saat ini.
- git pull, digunakan untuk mendapatkan *file* dari *remote repository* langsung ke *working directory*
- git remote, digunakan untuk menghubungkan *local repository* (repositori lokal) dengan *remote repository*
- git status, digunakan untuk menampilkan semua *file* yang harus di-*commit*
- git log, digunakan melihat histori perubahan yang telah dilakukan, jadi semua *commit* akan tampil di sini

## Sekian dan Terima Kasih

# Day 2
# Hypertext Markup Language (HTML)

## Apa itu HTML

- Sederhananya, HTML adalah sebuah bahasa yang digunakan untuk membuat konten dan struktur dari halaman sebuah situs web
- Versi pertama HTML ditulis oleh [Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee) pada tahun 1993
- Versi terbaru HTML saat ini adalah HTML5. Versi ini merupakan versi yang direkomendasikan oleh World Wide Web Consortium (W3C)
- HTML5 pertama kali dirilis dalam ke publik pada tanggal 22 Januari 2008

## *Tools* yang harus dipersiapkan untuk membuat HTML

- Peramban Web (*Web Browser*), peramban web digunakan untuk menampilkan konten HTML
    - [Chrome](https://www.google.com/chrome/)
    - [Microsoft Edge](https://www.microsoft.com/en-us/edge)
    - [Firefox](https://www.mozilla.org/en-US/firefox/new/)
    - [Opera](https://www.opera.com/browsers/opera)
    - [Brave](https://brave.com/)
- *Text Editor*, text editor digunakan untuk menulis atau mengetikkan kode HTML
    - [Visual Studio Code](https://code.visualstudio.com/download), dikembangkan oleh Microsoft
    - [Sublime Text](https://www.sublimetext.com/)
    - [Atom](https://atom.io/), dikembangkan oleh GitHub
    - [Bracket](https://brackets.io/), dikembangkan oleh Adobe
    - [Notepad++](https://notepad-plus-plus.org/downloads/)

## Struktur HTML

```html
<!DOCTYPE html>
<html>
<head>
	<title>Judu Halaman/title>
</head>
<body>
	<h1>Judul Teks</h1>
	<p>Isi Paragraf</p>
</body>
</html>
```

- <!DOCTYPE html> menyatakan bahwa kode HTML yang dibuat menggunakan versi HTML5
- < html > menyatakan elemen akar dari halaman HTML
- < head > berisi informasi meta tentang halaman HTML
- < title > digunakan untuk membuat judul halaman HTML
- < body > menyatakan badan HTML, dan merupakan wadah untuk semua konten yang terlihat, seperti judul, paragraf, gambar, *hyperlink*, tabel, *list*, dan lain-lain.
- < h1 > digunakan membuat judul besar
- < p > digunakan untuk menyatakan paragraf

## Elemen HTML

Elemen HTML terdiri dari *tag* pembuka, kontennya, dan *tag* penutup.

```html
<tagname> Isi konten </tagname>
```

Contoh Elemen HTML

```html
<h1> Judul Besar </h1>
<p> Ini adalah paragraf </p>
```

## Atribut HTML

Atribut merupakan properti dari sebuah elemen HTML

```html
<tagname attribute="value"> Isi konten </tagname>
```

- Semua elemen HTML bisa memiliki atribut
- Atribut selalu diletakkan pada *tag* pembuka sebuah elemen
- Semua atribut yang bisa dipakai untuk elemen HTML bisa dilihat melalui [tautan](https://www.w3schools.com/tags/ref_attributes.asp) berikut ini

Contoh Atribut HTML

```html
<a href="google.com">Klik di sini untuk membuka Google </a>
```

## Komentar pada HTML

- Komentar adalah sebuah teks yang tidak akan tampil pada peramban web (*web browser*).
- Komentar digunakan untuk memberikan penjelasan lebih lengkap tentang kode HTML yang ditulis
    
    ```html
    <!-- Ketikkan komentar di sini -->
    ```
    
    > Perhatikan bahwa terdapat tanda seru (!) pada *tag* pembuka, tetapi tidak ada pada *tag* penutup.
    > 
    
    Contoh 
    
    ```html
    <!-- Ini adalah komentar. Komentar tidak akan tampil di peramban web (*web browser*) -->
    ```
    

## Ekstensi Live Server pada Visual Studio Code

- Setiap kita menuliskan kode HTML, kita harus me-*refresh* halaman web tersebut di peramban web (*web browser*) untuk menampilkan kode yang telah dibuat. Hal tersebut akan sangat merepotkan karena harus berulang kali me-*refresh* halamannya
- Solusi dari permasalahan tersebut adalah dengan menginstal ekstensi yang bernama **Live Server** pada Visual Studio Code
- Ekstensi Live Server memiliki fitur *live reload* yang memungkinkan kita untuk tidak berulang kali me-*refresh* halaman web

## *Tag* HTML Populer

- < p >, digunakan untuk membuat paragraf
- < h1 > - < h6 >, digunakan untuk membuat judul besar
- < i > atau < em >, digunakan untuk membuat teks miring
- < b > atau < strong >, digunakan untuk menebalkan teks
- < a >, digunakan untuk membuat *hyperlink*
- < hr >, digunakan untuk membuat garis pemisah horizontal
- < img >, digunakan untuk memanggil gambar
- < video >, digunakan untuk memanggil video
- < table >, digunakan untuk membuat tabel
- < form >, digunakan untuk membuat form

## Elemen Semantik pada HTML

- Elemen semantik adalah elemen yang memiliki arti.
- Terdapat beberapa *tag* semantik yang dapat digunakan untuk mendefinisikan bagian yang berbeda dari halaman web
    - < article >
    - < aside >
    - < details >
    - < figcaption >
    - < figure >
    - < footer >
    - < header >
    - < main >
    - < mark >
    - < nav >
    - < section >
    - < summary >
    - < time >
- Kegunaan menggunakan elemen semantik adalah meningkatkan aksesibilitas, meningkatkan SEO, serta lebih mudah di-*maintain*

## Deploy HTML

- Deploy adalah sebuah proses untuk menyebarkan atau mengunggah kode ke web server agak bisa di akses oleh banyak orang
- Kode HTML bisa disebarkan atau diunggah melalui layanan berikut
    - Netlify
    - GitHub Pages
    - Firebase
    - Microsoft Azure

## Sekian dan Terima kasih

# Day 3

# Cascading Style Sheet (CSS)

## Apa itu CSS?

- CSS adalah sebuah bahasa yang digunakan untuk mempercantik dan memberi gaya (*styling*) halaman HTML
- Dengan CSS, kita bisa mengubah warna, menggunakan *font custom*, mengedit format teks, mengatur tata letak, dan lainnya
- CSS pertama kali diperkenalkan pada tahun 1996

## Struktur CSS

```css
.selector{
  properti: nilai;
}
```

- *Selector* menunjuk ke elemen HTML apa yang ingin dipercantik atau diberi gaya
- Nama properti CSS dan nilai, dipisahkan dengan titik dua

## Komentar pada CSS

```css
/* Ini adalah komentar*/
p {
  font-size: 15px;
}
```

- Komentar CSS tidak ditampilkan di peramban web, tetapi dapat membantu memberi penjelasan mengenai kode CSS yang dibuat.

## Cara Memanggil file CSS ke dalam file HTML

### External CSS

- Dengan CSS eksternal, Kita bisa mengubah tampilan seluruh situs web hanya dengan mengubah satu *file*
- Setiap halaman HTML harus menyertakan referensi ke CSS eksternal di dalam elemen < link >, di dalam elemen < head >
- CSS eksternal dapat ditulis dalam *text editor* apa pun, dan harus disimpan dengan ekstensi .css
    
    ```html
    <!DOCTYPE html>
    <html>
    	<head>
    		<link rel="stylesheet" href="mystyle.css">
    	</head>
    	<body>
    		<h1>This is a heading</h1>
    		<p>This is a paragraph.</p>
    	</body>
    </html>
    ```
    

### **Internal CSS**

- CSS internal dapat digunakan jika satu halaman HTML tunggal memiliki gaya yang unik.
- CSS internal dibuat di dalam elemen < style >, di dalam elemen < head >
    
    ```html
    <!DOCTYPE html>
    <html>
    	<head>
    		<style>
    		body {
    		  background-color: linen;
    		}
    		
    		h1 {
    		  color: maroon;
    		  margin-left: 40px;
    		}
    		</style>
    	</head>
    	<body>
    	
    	<h1>KKN di Desa Penari/h1>
    	<p>KKN di Desa Penari adalah film horor dari Indonesia</p>
    	
    	</body>
    </html>
    ```
    

### Inline CSS

- CSS Inline dapat digunakan untuk memberikan gaya unik untuk satu elemen.
- Untuk menggunakan CSS Inline tambahkan atribut style ke elemen yang relevan. Atribut gaya dapat berisi properti CSS apa pun.
    
    ```html
    <!DOCTYPE html>
    <html>
    	<body>
    		<h1 style="color:blue;text-align:center;">Indonesia/h1>
    		<p style="color:red;">Indonesia adalah negara kepulauan/p>
    	</body>
    </html>
    ```
    

## Selector pada CSS

- Selector CSS digunakan untuk menemukan atau memilih elemen HTML yang ingin diberi gaya atau dipercantik.
- Selector CSS dapat dibagi ke dalam lima kategori:
    - Simple Selector (memilih elemen berdasarkan nama elemen, id, class)
    - Combinator Selector (memilih elemen berdasarkan hubungan spesifik antar elemen)
    - Pseudo-class Selector (memilih elemen berdasarkan keadaan tertentu)
    - Pseudo-elements Selector (memilih dan memberi gaya pada bagian dari sebuah elemen)
    - Attribute Selector (memilih elemen berdasarkan atribut atau nilai atribut)

### Selector berdasarkan nama elemen

```css
h1 {
  text-align: center;
  color: blue;
}
```

### Selector berdasarkan id

- Selector id menggunakan atribut id dari elemen HTML untuk memilih suatu elemen
- Id dari sebuah elemen adalah unik di dalam sebuah halaman, jadi selector id digunakan untuk memilih satu elemen yang unik
- Untuk memilih elemen dengan id tertentu, ketikkan karakter hash (#), diikuti dengan id elemen.
    
    ```css
    #judul_pertama{
     font-size:20px;
    	background-color:red;
    }
    ```
    

### Selector berdasarkan nama

- Selector class memilih elemen HTML dengan atribut class tertentu.
- Untuk memilih elemen dengan class tertentu, tulis karakter titik (.), diikuti dengan nama class.
    
    ```css
    .foto_profil{
      width:100px;
    }
    ```
    

### Universal Selector

Selector universal (*) memilih semua elemen HTML pada halaman.

```css
* {
 background-color : red;
}
```

### Chaining Selectors

Chaining selector dapat kita gunakan pada case/kasus berikut. Jika kita memiliki 3 tag elemen HTML pada CSS namun kita ingin ada 1 elemen HTML yang memiliki styling berbeda

```css
h1 {
color : green;
}

h1.judul_pertama {
color : blue;
}
```

**Grouping Selector**

- Grouping selector memilih semua elemen HTML dengan *styling* yang sama.
- Untuk membuat grouping selector, pisahkan setiap selector dengan koma.
    
    ```css
    h1, h2, p {
      font-weight: bold;
      color: blue;
    }
    ```
    

## CSS !important

- !important CSS berada di level paling atas dari ID dan Class.
- Jika pada *styling* CSS kita menggunakan !important, maka *styling* sebelumnya baik itu id, nama elemen atau nama kelas akan di-*override*

# Day 4

# Algoritma

## Apa itu Algoritma?

- Algoritma adalah proses tersebut dilakukan dengan cara yang logis (masuk akal) dan sistematis (terurut)
- Berdasarkan Microsoft Press Computer and Internet Dictionary (1998), algoritma adalah urutan langkah logis tertentu untuk memecahkan suatu masalah
- Programming identik dengan memecahkan masalah sehingga pengetahuan tentang algoritma adalah hal yang harus
- Adapun ciri-ciri algoritma adalah sebagai berikut:
    - Memiliki input
    - Memiliki output
    - Definiteness (pasti)
    - Finiteness (ada batas)
    - Effectiveness (tepat dan efisien)
- Algoritma juga memiliki berbagai proses yaitu sebagai berikut:
    - Sequence, instruksi dijalankan secara berurutan
    - Selection, instruksi dijalankan jika memenuhi suatu kondisi
    - Iteration, instruksi berulang kali dijalankan selama memenuhi suatu kondisi
    - Concurrent, instruksi dijalankan secara bersamaan

## Penulisan Algoritma

Algoritma dapat disajikan dengan beberapa cara yaitu

### Deskriptif

Penulisan algoritma dengan cara deskriptif seperti kita menulis tutorial (tata cara)
dengan bahasa sehari-hari

### Flow Chart

Flow chart atau diagram alir, penyajian algoritmanya lebih mudah dibaca karena
memiliki tampilan visual. Flow chart menggunakan simbol bangun datar sebagai
representasi dari proses yang dilakukan

### Pseudo Code

Pseudo code adalah salah bentuk penulisan algoritma yang memiliki pendekatan terhadap sebuah bahasa pemrograman, namun pseudo code bukan bahasa pemrograman

Pada umumnya pseudocode memiliki 3 bagian:

- Judul : Penjelasan dari algoritma yang dibuat
- Deklarasi : Mendefinisikan/menyiapkan semua nama (variabel) yang akan
digunakan
- Deskripsi : langkah-langkah penyelesaian masalah

Tidak ada aturan baku dalam penulisan pseudocode, asalkan:

- Jelas
- Simple
- Konsisten
- Dan mudah dibaca orang lain

## Sekian dan Terima Kasih
